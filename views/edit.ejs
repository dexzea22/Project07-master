<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Edit Student Information</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
  <div class="container">
    <h1>Edit Student Information</h1>
    <form action="/edit/<%= student.userId %>" method="POST">
        <div class="form-group">
            <label for="address">Address:</label>
            <input type="text" class="form-control" id="address" name="address" value="<%= student.address %>" required>
        </div>
        <div class="form-group">
            <label for="city">City:</label>
            <input type="text" class="form-control" id="cityInput" name="city" value="<%= student.city %>" required>
        </div>
        <div class="form-group">
            <label for="region">Region:</label>
            <input type="text" class="form-control" id="regionInput" name="region" value="<%= student.region %>" required>
        </div>
        <div class="form-group">
            <label for="zipcode">Zip Code:</label>
            <input type="text" maxlength="4" class="form-control" id="zipcode" name="zipcode" value="<%= student.zipcode %>" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" required>
        </div>
        <div class="form-group">
            <label for="civilStatus">Civil Status:</label>
            <select class="form-control" id="civil_status" name="civil_status" required>
            <option value="Single" <%= student.civilStatus === 'Single' ? 'selected' : '' %>>Single</option>
            <option value="Married" <%= student.civilStatus === 'Married' ? 'selected' : '' %>>Married</option>
            <option value="Divorced" <%= student.civilStatus === 'Divorced' ? 'selected' : '' %>>Divorced</option>
            <option value="Widowed" <%= student.civilStatus === 'Widowed' ? 'selected' : '' %>>Widowed</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
        </form>
    </div>

    <script>
        function autocomplete(inp, arr) {
          /*the autocomplete function takes two arguments,
          the text field element and an array of possible autocompleted values:*/
          var currentFocus;
          /*execute a function when someone writes in the text field:*/
          inp.addEventListener("input", function(e) {
              var a, b, i, val = this.value;
              /*close any already open lists of autocompleted values*/
              closeAllLists();
              if (!val) { return false;}
              currentFocus = -1;
              /*create a DIV element that will contain the items (values):*/
              a = document.createElement("DIV");
              a.setAttribute("id", this.id + "autocomplete-list");
              a.setAttribute("class", "autocomplete-items");
              /*append the DIV element as a child of the autocomplete container:*/
              this.parentNode.appendChild(a);
              /*for each item in the array...*/
              for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                  /*create a DIV element for each matching element:*/
                  b = document.createElement("DIV");
                  /*make the matching letters bold:*/
                  b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                  b.innerHTML += arr[i].substr(val.length);
                  /*insert a input field that will hold the current array item's value:*/
                  b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                  /*execute a function when someone clicks on the item value (DIV element):*/
                  b.addEventListener("click", function(e) {
                      /*insert the value for the autocomplete text field:*/
                      inp.value = this.getElementsByTagName("input")[0].value;
                      /*close the list of autocompleted values,
                      (or any other open lists of autocompleted values:*/
                      closeAllLists();
                  });
                  a.appendChild(b);
                }
              }
          });
          /*execute a function presses a key on the keyboard:*/
          inp.addEventListener("keydown", function(e) {
              var x = document.getElementById(this.id + "autocomplete-list");
              if (x) x = x.getElementsByTagName("div");
              if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                  /*and simulate a click on the "active" item:*/
                  if (x) x[currentFocus].click();
                }
              }
          });
          function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
          }
          function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
              x[i].classList.remove("autocomplete-active");
            }
          }
          function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
              if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
              }
            }
          }
          /*execute a function when someone clicks in the document:*/
          document.addEventListener("click", function (e) {
              closeAllLists(e.target);
          });
        }
        
        /*An array containing all the cities names in the Philippines:*/
        var cities = ["Alaminos","Antipolo","Bacoor","Bago","Bais","Balanga","Batac","Batangas City","Bayawan","Baybay","Bayugan","Biñan","Bislig","Bogo","Borongan","Butuan","Cabadbaran","Cabanatuan","Cabuyao","Cadiz","Cagayan de Oro","Calamba","Calapan","Calbayog","Caloocan","Candon","Canlaon","Carcar","Catbalogan","Cauayan","Cavite City","Cebu City","Cotabato City","Dagupan","Danao","Dapitan","Dasmariñas","Davao City","Digos","Dipolog","Dumaguete","El Salvador","Escalante","Gapan","General Santos","General Trias","Gingoog","Guihulngan","Himamaylan","Ilagan","Iligan","Iloilo City","Imus","Iriga","Isabela","Kabankalan","Kidapawan","Koronadal","La Carlota","Lamitan","Laoag","Lapu-Lapu","Las Piñas","	Legazpi","Ligao","Lipa","Lucena","Maasin","Mabalacat","Makati","Malabon","Malaybalay","Malolos","Mandaluyong","Mandaue","Manila","Marawi","Marikina","Masbate City","Mati","Meycauayan","Muñoz","Muntinlupa","Naga","Naga Cebu","Navotas","Olongapo","Ormoc","Oroquieta","Ozamiz","Pagadian","Palayan","Panabo","Parañaque","Pasay","Pasig","Passi","Puerto Princesa","Quezon City","Roxas","Sagay","Samal","San Carlos","San Carlos Pangasinan","San Fernando","San Fernando Pampanga","San Jose","San Jose del Monte","San Juan","San Pablo","San Pedro","Santa Rosa","Santiago","Silay","Sipalay","Sorsogon City","Surigao City","Tabaco","Tabuk","Tacloban","Tacurong","Tagaytay","Tagbilaran","Taguig","Tagum","Talisay","Talisay","Tanauan","Tandag","Tangub","Tanjay","Tarlac City","Tayabas","Toledo","Trece Martires","Tuguegarao","Urdaneta","Valencia","Valenzuela","Victorias","Vigan","Zamboanga City"];
        
        /*An array containing all the regions in the Philippines:*/
        var regions = ["1", "2", "3", "4-A", "4-B", "5", "6", "7", "8", "9", "10", "11", "12", "16", "NCR", "ARMM", "CAR"];
        
        /*initiate the autocomplete function on the "myInput" element, and pass along the cities array as possible autocomplete values:*/
        autocomplete(document.getElementById("cityInput"), cities);
        autocomplete(document.getElementById("regionInput"), regions);
        </script>
    </body>
    </html>
